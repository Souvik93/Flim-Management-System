package com.flp.fms.dao;

import com.flp.fms.domain.Actor;
import com.flp.fms.domain.Category;
import com.flp.fms.domain.Film;
import com.flp.fms.domain.Language;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

public class FilmDaoImpl implements IFilmDao {

	Connection con = null;
	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	public boolean addFilm(Film f,ArrayList<Actor> aa,Language l,ArrayList<Category> ac) {

		String cd=dateFormat.format(new Date());
		//Date dob=a.getDob();
		try {
			java.util.Date date = dateFormat.parse(cd);

			java.sql.Date createDate = new java.sql.Date(date.getTime());

			//java.sql.Date dob1 = new java.sql.Date(dob.getTime());

			con = DataSource.getInstance().getConnection();
			Statement st=(Statement) con.createStatement();

			int result= st.executeUpdate("INSERT INTO film(tittle, description,release_year,language_id,length,rating,create_date) VALUES('"+f.getTittle()+"','"+f.getDescription()+"',"+f.getRelease_year()+","+f.getLanguage().getLamguageId()+","+f.getLength()+","+f.getRating()+",'"+createDate+"')");
			
			
			/*PreparedStatement dupQuery = con.prepareStatement("select actor_id from actor where first_name=? and last_name=? and dob=? and delete_date is null ");
			dupQuery.setString(1,a.getFirstName());
			dupQuery.setString(2,a.getLastName());

			dupQuery.setDate(3,dob1);

			
			
			
			int result1= st.executeUpdate("Insert into film_actor(film_id,actor_id) values(");*/
			
			
			if(result>=0)
			{
				con.close();
				return true;
			}

			con.close();
		} 

		catch (Exception e1) {

			e1.printStackTrace();
		}


		return false;
	}

	public boolean updateFilm(String title,int release_year,Film f) {
		
		
		try {
			

			con = DataSource.getInstance().getConnection();
			Statement st=(Statement) con.createStatement();

			PreparedStatement dupQuery = con.prepareStatement("update film set tittle=?,description=?,release_year=?,length=?,rating=? where tittle=? and release_year=? and delete_date is null");
			
			
			dupQuery.setString(1,f.getTittle());
			dupQuery.setString(2,f.getDescription());

			dupQuery.setInt(3,f.getRelease_year());
			dupQuery.setInt(4,f.getLength());
			dupQuery.setInt(5,f.getRating());
			
			
			dupQuery.setString(6,title);
			dupQuery.setInt(7,release_year);

			
			
			int rs=dupQuery.executeUpdate();
			if(rs>0)
			{
				con.close();
				return true;
			}

			con.close();
		} 

		catch (Exception e1) {

			e1.printStackTrace();
		}



		return false;
	
	}

	public boolean removeFilm(Film f) {
		try{
			
		con = DataSource.getInstance().getConnection();
		Statement st=(Statement) con.createStatement();

		PreparedStatement dupQuery = con.prepareStatement("update film set delete_date=? where tittle=? and release_year=? and delete_date is null");
		
		String cd=dateFormat.format(new Date());
		
		java.util.Date date = dateFormat.parse(cd);

		java.sql.Date deleteDate = new java.sql.Date(date.getTime());
		
		dupQuery.setDate(1,deleteDate);
		
		
		dupQuery.setString(2,f.getTittle());
		
		dupQuery.setInt(3,f.getRelease_year());
		int rs=dupQuery.executeUpdate();
		if(rs>0)
		{
			con.close();
			return true;
		}

		con.close();
	} 

	catch (Exception e1) {

		e1.printStackTrace();
	}

		

		return false;
	}

	public  ArrayList<Film> searchFilm(Film f){

		ArrayList<Film> filmList=new ArrayList<Film>();

		try{
			con = DataSource.getInstance().getConnection();
			Statement st = con.createStatement(); 
			ResultSet rs= st.executeQuery("Select tittle,description,release_year,language_id,rating,length from film where tittle='"+f.getTittle()+"'and release_year="+f.getRelease_year());
			
			if(!rs.next())
			{
				con.close();
				return null;
			}
			
			while(rs.next()){  

				Film f1=new Film();
				Language l=new Language();

				f1.setTittle(rs.getString(1));
				f1.setDescription(rs.getString(2));

				f1.setRelease_year(rs.getInt(3));

				l.setLamguageId(rs.getInt(4));
				f1.setLanguage(l);

				f1.setRating(rs.getInt(5));

				f1.setLength(rs.getInt(6));

				filmList.add(f1);

			}

			con.close();
			//return filmList;
		} catch(Exception e) {
			e.printStackTrace();
		}  
		return  filmList;
	}
	
	
	public ArrayList<Film> searchByReleaseYear(Film f)
	{
		
		
		
		ArrayList<Film> filmList=new ArrayList<Film>();

		try{
			con = DataSource.getInstance().getConnection();
			Statement st = con.createStatement(); 
			ResultSet rs= st.executeQuery("Select tittle,description,release_year,language_id,rating,length from film where release_year="+f.getRelease_year());
			
			if(!rs.next())
			{
				con.close();
				return null;
			}
			
			while(rs.next()){  

				Film f1=new Film();
				Language l=new Language();

				f1.setTittle(rs.getString(1));
				f1.setDescription(rs.getString(2));

				f1.setRelease_year(rs.getInt(3));

				l.setLamguageId(rs.getInt(4));
				f1.setLanguage(l);

				f1.setRating(rs.getInt(5));

				f1.setLength(rs.getInt(6));

				filmList.add(f1);

			}

			con.close();
			//return filmList;
		} catch(Exception e) {
			e.printStackTrace();
		}  
		return  filmList;
		
		

	}
	
	public ArrayList<Film> searchByRating(Film f)
	{
		

		ArrayList<Film> filmList=new ArrayList<Film>();

		try{
			con = DataSource.getInstance().getConnection();
			Statement st = con.createStatement(); 
			ResultSet rs= st.executeQuery("Select tittle,description,release_year,language_id,rating,length from film where rating="+f.getRating());
			
			if(!rs.next())
			{
				con.close();
				return null;
			}
			
			while(rs.next()){  

				Film f1=new Film();
				Language l=new Language();

				f1.setTittle(rs.getString(1));
				f1.setDescription(rs.getString(2));

				f1.setRelease_year(rs.getInt(3));

				l.setLamguageId(rs.getInt(4));
				f1.setLanguage(l);

				f1.setRating(rs.getInt(5));

				f1.setLength(rs.getInt(6));

				filmList.add(f1);

			}

			con.close();
			//return filmList;
		} catch(Exception e) {
			e.printStackTrace();
		}  
		return  filmList;
	}
	

	public  ArrayList<Film> getAllFilm() {
		
		
		ArrayList<Film> filmList=new ArrayList<Film>();

		try{
			con = DataSource.getInstance().getConnection();
			Statement st = con.createStatement(); 
			ResultSet rs= st.executeQuery("Select tittle,description,release_year,language_id,rating,length from film where delete_date is null");
			while(rs.next()){  

				Film a=new Film();
				a.setTittle(rs.getString(1));
				a.setDescription(rs.getString(2));
				a.setRelease_year(rs.getInt(3));
				Language l=new Language();
				l.setLamguageId(04);
				a.setLanguage(l);
				a.setRating(5);
				a.setLength(6);
				filmList.add(a);

			}

			con.close();
			
		} catch(Exception e) {
			e.printStackTrace();
		}  
		return filmList;
	}

	public ArrayList<Film> searchBylanguage(String lang)
	{
		ArrayList<Film> af=new ArrayList<Film>();
		
		try{
			
			con = DataSource.getInstance().getConnection();
			Statement st=(Statement) con.createStatement();

			PreparedStatement dupQuery = con.prepareStatement("select language_id from language where language_name=?");
			dupQuery.setString(1,lang);
			ResultSet rs=dupQuery.executeQuery();
			if(rs.next())
			{
				int lid=rs.getInt(1);
				PreparedStatement dQ = con.prepareStatement("select tittle,description,rating,length,release_year from film where language_id=?");
				dQ.setInt(1,lid);
				ResultSet rs1=dQ.executeQuery();
				while(rs1.next())
				{
					
					Film a=new Film();
					a.setTittle(rs1.getString(1));
					a.setDescription(rs1.getString(2));
					a.setRelease_year(rs1.getInt(5));
					Language l=new Language();
					l.setLangugaeName(lang);
					l.setLamguageId(lid);
					a.setLanguage(l);
					a.setRating(3);
					a.setLength(4);
					af.add(a);
					
				}
				con.close();
				return af;
			}
            
		
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return null;
	}
	
	
}
